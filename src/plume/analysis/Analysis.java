/* This file was generated by SableCC (http://www.sablecc.org/). */

package plume.analysis;

import plume.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAClass(AClass node);
    void caseAType(AType node);
    void caseAFielddclMember(AFielddclMember node);
    void caseAMethoddclMember(AMethoddclMember node);
    void caseAArg(AArg node);
    void caseAConditionalExpr(AConditionalExpr node);
    void caseAOpExpr(AOpExpr node);
    void caseAMethodCallExpr(AMethodCallExpr node);
    void caseANewObjExpr(ANewObjExpr node);
    void caseAFieldAccessExpr(AFieldAccessExpr node);
    void caseAInstanceofExpr(AInstanceofExpr node);
    void caseACastExpr(ACastExpr node);
    void caseAIdentifierExpr(AIdentifierExpr node);
    void caseAStringExpr(AStringExpr node);
    void caseAIntegerExpr(AIntegerExpr node);
    void caseATrueExpr(ATrueExpr node);
    void caseAFalseExpr(AFalseExpr node);
    void caseAErrorExpr(AErrorExpr node);
    void caseASuperExpr(ASuperExpr node);
    void caseAThisExpr(AThisExpr node);
    void caseAAddOp(AAddOp node);
    void caseADivOp(ADivOp node);
    void caseAEqOp(AEqOp node);
    void caseAAndOp(AAndOp node);
    void caseANotOp(ANotOp node);
    void caseAOrOp(AOrOp node);
    void caseANeqOp(ANeqOp node);
    void caseALowereqOp(ALowereqOp node);
    void caseALowerOp(ALowerOp node);
    void caseABiggereqOp(ABiggereqOp node);
    void caseABiggerOp(ABiggerOp node);
    void caseAMinusOp(AMinusOp node);
    void caseAModOp(AModOp node);
    void caseAMulOp(AMulOp node);
    void caseAAinverseOp(AAinverseOp node);

    void caseTString(TString node);
    void caseTWhiteSpace(TWhiteSpace node);
    void caseTPlus(TPlus node);
    void caseTDiv(TDiv node);
    void caseTMul(TMul node);
    void caseTMod(TMod node);
    void caseTMinus(TMinus node);
    void caseTLe(TLe node);
    void caseTL(TL node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTB(TB node);
    void caseTBe(TBe node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTColon(TColon node);
    void caseTSeta(TSeta node);
    void caseTComma(TComma node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTDot(TDot node);
    void caseTKclass(TKclass node);
    void caseTKmethod(TKmethod node);
    void caseTKoverride(TKoverride node);
    void caseTKextends(TKextends node);
    void caseTKfield(TKfield node);
    void caseTKif(TKif node);
    void caseTKthen(TKthen node);
    void caseTKelse(TKelse node);
    void caseTKnew(TKnew node);
    void caseTKthis(TKthis node);
    void caseTKsuper(TKsuper node);
    void caseTKis(TKis node);
    void caseTKerror(TKerror node);
    void caseTKabstract(TKabstract node);
    void caseTKinstanceof(TKinstanceof node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTKas(TKas node);
    void caseTLineComment(TLineComment node);
    void caseTComment(TComment node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseEOF(EOF node);
}
