/* This file was generated by SableCC (http://www.sablecc.org/). */

package plume.analysis;

import java.util.*;
import plume.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAClass(AClass node)
    {
        defaultCase(node);
    }

    public void caseAType(AType node)
    {
        defaultCase(node);
    }

    public void caseAFielddclMember(AFielddclMember node)
    {
        defaultCase(node);
    }

    public void caseAMethoddclMember(AMethoddclMember node)
    {
        defaultCase(node);
    }

    public void caseAArg(AArg node)
    {
        defaultCase(node);
    }

    public void caseAConditionalExpr(AConditionalExpr node)
    {
        defaultCase(node);
    }

    public void caseAOpExpr(AOpExpr node)
    {
        defaultCase(node);
    }

    public void caseAMethodCallExpr(AMethodCallExpr node)
    {
        defaultCase(node);
    }

    public void caseANewObjExpr(ANewObjExpr node)
    {
        defaultCase(node);
    }

    public void caseAFieldAccessExpr(AFieldAccessExpr node)
    {
        defaultCase(node);
    }

    public void caseAInstanceofExpr(AInstanceofExpr node)
    {
        defaultCase(node);
    }

    public void caseACastExpr(ACastExpr node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExpr(AIdentifierExpr node)
    {
        defaultCase(node);
    }

    public void caseAStringExpr(AStringExpr node)
    {
        defaultCase(node);
    }

    public void caseAIntegerExpr(AIntegerExpr node)
    {
        defaultCase(node);
    }

    public void caseATrueExpr(ATrueExpr node)
    {
        defaultCase(node);
    }

    public void caseAFalseExpr(AFalseExpr node)
    {
        defaultCase(node);
    }

    public void caseAErrorExpr(AErrorExpr node)
    {
        defaultCase(node);
    }

    public void caseASuperExpr(ASuperExpr node)
    {
        defaultCase(node);
    }

    public void caseAThisExpr(AThisExpr node)
    {
        defaultCase(node);
    }

    public void caseAAddOp(AAddOp node)
    {
        defaultCase(node);
    }

    public void caseADivOp(ADivOp node)
    {
        defaultCase(node);
    }

    public void caseAEqOp(AEqOp node)
    {
        defaultCase(node);
    }

    public void caseAAndOp(AAndOp node)
    {
        defaultCase(node);
    }

    public void caseANotOp(ANotOp node)
    {
        defaultCase(node);
    }

    public void caseAOrOp(AOrOp node)
    {
        defaultCase(node);
    }

    public void caseANeqOp(ANeqOp node)
    {
        defaultCase(node);
    }

    public void caseALowereqOp(ALowereqOp node)
    {
        defaultCase(node);
    }

    public void caseALowerOp(ALowerOp node)
    {
        defaultCase(node);
    }

    public void caseABiggereqOp(ABiggereqOp node)
    {
        defaultCase(node);
    }

    public void caseABiggerOp(ABiggerOp node)
    {
        defaultCase(node);
    }

    public void caseAMinusOp(AMinusOp node)
    {
        defaultCase(node);
    }

    public void caseAModOp(AModOp node)
    {
        defaultCase(node);
    }

    public void caseAMulOp(AMulOp node)
    {
        defaultCase(node);
    }

    public void caseAAinverseOp(AAinverseOp node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMul(TMul node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTLe(TLe node)
    {
        defaultCase(node);
    }

    public void caseTL(TL node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTB(TB node)
    {
        defaultCase(node);
    }

    public void caseTBe(TBe node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTSeta(TSeta node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTKclass(TKclass node)
    {
        defaultCase(node);
    }

    public void caseTKmethod(TKmethod node)
    {
        defaultCase(node);
    }

    public void caseTKoverride(TKoverride node)
    {
        defaultCase(node);
    }

    public void caseTKextends(TKextends node)
    {
        defaultCase(node);
    }

    public void caseTKfield(TKfield node)
    {
        defaultCase(node);
    }

    public void caseTKif(TKif node)
    {
        defaultCase(node);
    }

    public void caseTKthen(TKthen node)
    {
        defaultCase(node);
    }

    public void caseTKelse(TKelse node)
    {
        defaultCase(node);
    }

    public void caseTKnew(TKnew node)
    {
        defaultCase(node);
    }

    public void caseTKthis(TKthis node)
    {
        defaultCase(node);
    }

    public void caseTKsuper(TKsuper node)
    {
        defaultCase(node);
    }

    public void caseTKis(TKis node)
    {
        defaultCase(node);
    }

    public void caseTKerror(TKerror node)
    {
        defaultCase(node);
    }

    public void caseTKabstract(TKabstract node)
    {
        defaultCase(node);
    }

    public void caseTKinstanceof(TKinstanceof node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTKas(TKas node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
