/* This file was generated by SableCC (http://www.sablecc.org/). */

package plume.node;

import java.util.*;
import plume.analysis.*;

@SuppressWarnings("nls")
public final class AMethoddclMember extends PMember
{
    private TId _id_;
    private PType _type_;
    private final LinkedList<PArg> _args_ = new LinkedList<PArg>();
    private PExpr _body_;
    private TKoverride _koverride_;

    public AMethoddclMember()
    {
        // Constructor
    }

    public AMethoddclMember(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") List<PArg> _args_,
        @SuppressWarnings("hiding") PExpr _body_,
        @SuppressWarnings("hiding") TKoverride _koverride_)
    {
        // Constructor
        setId(_id_);

        setType(_type_);

        setArgs(_args_);

        setBody(_body_);

        setKoverride(_koverride_);

    }

    @Override
    public Object clone()
    {
        return new AMethoddclMember(
            cloneNode(this._id_),
            cloneNode(this._type_),
            cloneList(this._args_),
            cloneNode(this._body_),
            cloneNode(this._koverride_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethoddclMember(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public LinkedList<PArg> getArgs()
    {
        return this._args_;
    }

    public void setArgs(List<PArg> list)
    {
        this._args_.clear();
        this._args_.addAll(list);
        for(PArg e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PExpr getBody()
    {
        return this._body_;
    }

    public void setBody(PExpr node)
    {
        if(this._body_ != null)
        {
            this._body_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._body_ = node;
    }

    public TKoverride getKoverride()
    {
        return this._koverride_;
    }

    public void setKoverride(TKoverride node)
    {
        if(this._koverride_ != null)
        {
            this._koverride_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._koverride_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._type_)
            + toString(this._args_)
            + toString(this._body_)
            + toString(this._koverride_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._args_.remove(child))
        {
            return;
        }

        if(this._body_ == child)
        {
            this._body_ = null;
            return;
        }

        if(this._koverride_ == child)
        {
            this._koverride_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        for(ListIterator<PArg> i = this._args_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArg) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._body_ == oldChild)
        {
            setBody((PExpr) newChild);
            return;
        }

        if(this._koverride_ == oldChild)
        {
            setKoverride((TKoverride) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
