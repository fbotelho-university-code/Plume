/* This file was generated by SableCC (http://www.sablecc.org/). */

package plume.node;

import java.util.*;
import plume.analysis.*;

@SuppressWarnings("nls")
public final class AClass extends PClass
{
    private TKabstract _kabstract_;
    private TId _type_;
    private PType _extends_;
    private final LinkedList<PMember> _member_ = new LinkedList<PMember>();

    public AClass()
    {
        // Constructor
    }

    public AClass(
        @SuppressWarnings("hiding") TKabstract _kabstract_,
        @SuppressWarnings("hiding") TId _type_,
        @SuppressWarnings("hiding") PType _extends_,
        @SuppressWarnings("hiding") List<PMember> _member_)
    {
        // Constructor
        setKabstract(_kabstract_);

        setType(_type_);

        setExtends(_extends_);

        setMember(_member_);

    }

    @Override
    public Object clone()
    {
        return new AClass(
            cloneNode(this._kabstract_),
            cloneNode(this._type_),
            cloneNode(this._extends_),
            cloneList(this._member_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClass(this);
    }

    public TKabstract getKabstract()
    {
        return this._kabstract_;
    }

    public void setKabstract(TKabstract node)
    {
        if(this._kabstract_ != null)
        {
            this._kabstract_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kabstract_ = node;
    }

    public TId getType()
    {
        return this._type_;
    }

    public void setType(TId node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public PType getExtends()
    {
        return this._extends_;
    }

    public void setExtends(PType node)
    {
        if(this._extends_ != null)
        {
            this._extends_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extends_ = node;
    }

    public LinkedList<PMember> getMember()
    {
        return this._member_;
    }

    public void setMember(List<PMember> list)
    {
        this._member_.clear();
        this._member_.addAll(list);
        for(PMember e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kabstract_)
            + toString(this._type_)
            + toString(this._extends_)
            + toString(this._member_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kabstract_ == child)
        {
            this._kabstract_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._extends_ == child)
        {
            this._extends_ = null;
            return;
        }

        if(this._member_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kabstract_ == oldChild)
        {
            setKabstract((TKabstract) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((TId) newChild);
            return;
        }

        if(this._extends_ == oldChild)
        {
            setExtends((PType) newChild);
            return;
        }

        for(ListIterator<PMember> i = this._member_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMember) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
