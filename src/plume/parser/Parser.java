/* This file was generated by SableCC (http://www.sablecc.org/). */

package plume.parser;

import plume.lexer.*;
import plume.node.*;
import plume.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAabstractclass1Class */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAabstractclass2Class */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAabstractclass3Class */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAabstractclass4Class */
		    {
			ArrayList list = new3();
			push(goTo(0), list);
		    }
		    break;
                    case 4: /* reduce AMethodMembers */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AFieldMembers */
		    {
			ArrayList list = new5();
			push(goTo(1), list);
		    }
		    break;
                    case 6: /* reduce AAmethodmethod1Method */
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;
                    case 7: /* reduce AAmethodmethod2Method */
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;
                    case 8: /* reduce AAmethodmethod3Method */
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;
                    case 9: /* reduce AAmethodmethod4Method */
		    {
			ArrayList list = new9();
			push(goTo(2), list);
		    }
		    break;
                    case 10: /* reduce AAabstractmethod1Method */
		    {
			ArrayList list = new10();
			push(goTo(2), list);
		    }
		    break;
                    case 11: /* reduce AAabstractmethod2Method */
		    {
			ArrayList list = new11();
			push(goTo(2), list);
		    }
		    break;
                    case 12: /* reduce AAabstractmethod3Method */
		    {
			ArrayList list = new12();
			push(goTo(2), list);
		    }
		    break;
                    case 13: /* reduce AAabstractmethod4Method */
		    {
			ArrayList list = new13();
			push(goTo(2), list);
		    }
		    break;
                    case 14: /* reduce ASingleParamlist */
		    {
			ArrayList list = new14();
			push(goTo(3), list);
		    }
		    break;
                    case 15: /* reduce ATailParamlist */
		    {
			ArrayList list = new15();
			push(goTo(3), list);
		    }
		    break;
                    case 16: /* reduce AParamParam */
		    {
			ArrayList list = new16();
			push(goTo(4), list);
		    }
		    break;
                    case 17: /* reduce ADeclField */
		    {
			ArrayList list = new17();
			push(goTo(5), list);
		    }
		    break;
                    case 18: /* reduce ABodyMethodbody */
		    {
			ArrayList list = new18();
			push(goTo(6), list);
		    }
		    break;
                    case 19: /* reduce ADijuncaoExpression */
		    {
			ArrayList list = new19();
			push(goTo(7), list);
		    }
		    break;
                    case 20: /* reduce AIfExpression */
		    {
			ArrayList list = new20();
			push(goTo(7), list);
		    }
		    break;
                    case 21: /* reduce AConjuncaoDijuncao */
		    {
			ArrayList list = new21();
			push(goTo(8), list);
		    }
		    break;
                    case 22: /* reduce ADijuncaoDijuncao */
		    {
			ArrayList list = new22();
			push(goTo(8), list);
		    }
		    break;
                    case 23: /* reduce AEqualityConjuncao */
		    {
			ArrayList list = new23();
			push(goTo(9), list);
		    }
		    break;
                    case 24: /* reduce AConjuncaoConjuncao */
		    {
			ArrayList list = new24();
			push(goTo(9), list);
		    }
		    break;
                    case 25: /* reduce ARelationalEquality */
		    {
			ArrayList list = new25();
			push(goTo(10), list);
		    }
		    break;
                    case 26: /* reduce AEqualEquality */
		    {
			ArrayList list = new26();
			push(goTo(10), list);
		    }
		    break;
                    case 27: /* reduce ANotequalEquality */
		    {
			ArrayList list = new27();
			push(goTo(10), list);
		    }
		    break;
                    case 28: /* reduce AAdditiveRelational */
		    {
			ArrayList list = new28();
			push(goTo(11), list);
		    }
		    break;
                    case 29: /* reduce ALowereqRelational */
		    {
			ArrayList list = new29();
			push(goTo(11), list);
		    }
		    break;
                    case 30: /* reduce ALowerRelational */
		    {
			ArrayList list = new30();
			push(goTo(11), list);
		    }
		    break;
                    case 31: /* reduce ABiggerRelational */
		    {
			ArrayList list = new31();
			push(goTo(11), list);
		    }
		    break;
                    case 32: /* reduce AInstanceofRelational */
		    {
			ArrayList list = new32();
			push(goTo(11), list);
		    }
		    break;
                    case 33: /* reduce ABiggereqRelational */
		    {
			ArrayList list = new33();
			push(goTo(11), list);
		    }
		    break;
                    case 34: /* reduce AMultiplicationAdditive */
		    {
			ArrayList list = new34();
			push(goTo(12), list);
		    }
		    break;
                    case 35: /* reduce APlusAdditive */
		    {
			ArrayList list = new35();
			push(goTo(12), list);
		    }
		    break;
                    case 36: /* reduce AMinusAdditive */
		    {
			ArrayList list = new36();
			push(goTo(12), list);
		    }
		    break;
                    case 37: /* reduce ACastMultiplication */
		    {
			ArrayList list = new37();
			push(goTo(13), list);
		    }
		    break;
                    case 38: /* reduce ADivMultiplication */
		    {
			ArrayList list = new38();
			push(goTo(13), list);
		    }
		    break;
                    case 39: /* reduce AModMultiplication */
		    {
			ArrayList list = new39();
			push(goTo(13), list);
		    }
		    break;
                    case 40: /* reduce AMulMultiplication */
		    {
			ArrayList list = new40();
			push(goTo(13), list);
		    }
		    break;
                    case 41: /* reduce AUnaryCast */
		    {
			ArrayList list = new41();
			push(goTo(14), list);
		    }
		    break;
                    case 42: /* reduce ACastCast */
		    {
			ArrayList list = new42();
			push(goTo(14), list);
		    }
		    break;
                    case 43: /* reduce ACastUnary */
		    {
			ArrayList list = new43();
			push(goTo(15), list);
		    }
		    break;
                    case 44: /* reduce AMinusUnary */
		    {
			ArrayList list = new44();
			push(goTo(15), list);
		    }
		    break;
                    case 45: /* reduce ANotUnary */
		    {
			ArrayList list = new45();
			push(goTo(15), list);
		    }
		    break;
                    case 46: /* reduce AAmethodcallpostfix1Postfix */
		    {
			ArrayList list = new46();
			push(goTo(16), list);
		    }
		    break;
                    case 47: /* reduce AAmethodcallpostfix2Postfix */
		    {
			ArrayList list = new47();
			push(goTo(16), list);
		    }
		    break;
                    case 48: /* reduce AAselfcallpostfix1Postfix */
		    {
			ArrayList list = new48();
			push(goTo(16), list);
		    }
		    break;
                    case 49: /* reduce AAselfcallpostfix2Postfix */
		    {
			ArrayList list = new49();
			push(goTo(16), list);
		    }
		    break;
                    case 50: /* reduce AFieldPostfix */
		    {
			ArrayList list = new50();
			push(goTo(16), list);
		    }
		    break;
                    case 51: /* reduce AAnewpostfix1Postfix */
		    {
			ArrayList list = new51();
			push(goTo(16), list);
		    }
		    break;
                    case 52: /* reduce AAnewpostfix2Postfix */
		    {
			ArrayList list = new52();
			push(goTo(16), list);
		    }
		    break;
                    case 53: /* reduce AIdentifierPostfix */
		    {
			ArrayList list = new53();
			push(goTo(16), list);
		    }
		    break;
                    case 54: /* reduce AOtherExpressionPostfix */
		    {
			ArrayList list = new54();
			push(goTo(16), list);
		    }
		    break;
                    case 55: /* reduce ANumberPostfix */
		    {
			ArrayList list = new55();
			push(goTo(16), list);
		    }
		    break;
                    case 56: /* reduce AStringPostfix */
		    {
			ArrayList list = new56();
			push(goTo(16), list);
		    }
		    break;
                    case 57: /* reduce ASuperPostfix */
		    {
			ArrayList list = new57();
			push(goTo(16), list);
		    }
		    break;
                    case 58: /* reduce AThisPostfix */
		    {
			ArrayList list = new58();
			push(goTo(16), list);
		    }
		    break;
                    case 59: /* reduce AFalsePostfix */
		    {
			ArrayList list = new59();
			push(goTo(16), list);
		    }
		    break;
                    case 60: /* reduce ATruePostfix */
		    {
			ArrayList list = new60();
			push(goTo(16), list);
		    }
		    break;
                    case 61: /* reduce AErrorPostfix */
		    {
			ArrayList list = new61();
			push(goTo(16), list);
		    }
		    break;
                    case 62: /* reduce AHeadArguments */
		    {
			ArrayList list = new62();
			push(goTo(17), list);
		    }
		    break;
                    case 63: /* reduce ATailArguments */
		    {
			ArrayList list = new63();
			push(goTo(17), list);
		    }
		    break;
                    case 64: /* reduce ATerminal$Members */
		    {
			ArrayList list = new64();
			push(goTo(18), list);
		    }
		    break;
                    case 65: /* reduce ANonTerminal$Members */
		    {
			ArrayList list = new65();
			push(goTo(18), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PClass node1 = (PClass) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAabstractclass1Class */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        PType ptypeNode4;
        LinkedList listNode6 = new LinkedList();
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        TId tidNode5;
        tidNode5 = (TId)nodeArrayList4.get(0);

        ptypeNode4 = new AType(tidNode5);
        }
        {
            // Block
        }

        pclassNode1 = new AClass(null, tidNode3, ptypeNode4, listNode6);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAabstractclass2Class */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TKabstract tkabstractNode2;
        TId tidNode3;
        PType ptypeNode4;
        LinkedList listNode6 = new LinkedList();
        tkabstractNode2 = (TKabstract)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        TId tidNode5;
        tidNode5 = (TId)nodeArrayList5.get(0);

        ptypeNode4 = new AType(tidNode5);
        }
        {
            // Block
        }

        pclassNode1 = new AClass(tkabstractNode2, tidNode3, ptypeNode4, listNode6);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAabstractclass3Class */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        PType ptypeNode4;
        LinkedList listNode7 = new LinkedList();
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        TId tidNode5;
        tidNode5 = (TId)nodeArrayList4.get(0);

        ptypeNode4 = new AType(tidNode5);
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassNode1 = new AClass(null, tidNode3, ptypeNode4, listNode7);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAabstractclass4Class */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        TKabstract tkabstractNode2;
        TId tidNode3;
        PType ptypeNode4;
        LinkedList listNode7 = new LinkedList();
        tkabstractNode2 = (TKabstract)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        TId tidNode5;
        tidNode5 = (TId)nodeArrayList5.get(0);

        ptypeNode4 = new AType(tidNode5);
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassNode1 = new AClass(tkabstractNode2, tidNode3, ptypeNode4, listNode7);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AMethodMembers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        pmemberNode1 = (PMember)nodeArrayList1.get(0);
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AFieldMembers */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        pmemberNode1 = (PMember)nodeArrayList1.get(0);
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAmethodmethod1Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        LinkedList listNode5 = new LinkedList();
        PExpr pexprNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList7.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        }
        pexprNode6 = (PExpr)nodeArrayList9.get(0);

        pmemberNode1 = new AMethoddclMember(tidNode2, ptypeNode3, listNode5, pexprNode6, null);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAmethodmethod2Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        LinkedList listNode5 = new LinkedList();
        PExpr pexprNode6;
        TKoverride tkoverrideNode7;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList8.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        }
        pexprNode6 = (PExpr)nodeArrayList10.get(0);
        tkoverrideNode7 = (TKoverride)nodeArrayList2.get(0);

        pmemberNode1 = new AMethoddclMember(tidNode2, ptypeNode3, listNode5, pexprNode6, tkoverrideNode7);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAmethodmethod3Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        LinkedList listNode6 = new LinkedList();
        PExpr pexprNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList8.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pexprNode7 = (PExpr)nodeArrayList10.get(0);

        pmemberNode1 = new AMethoddclMember(tidNode2, ptypeNode3, listNode6, pexprNode7, null);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAmethodmethod4Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        LinkedList listNode6 = new LinkedList();
        PExpr pexprNode7;
        TKoverride tkoverrideNode8;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList9.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pexprNode7 = (PExpr)nodeArrayList11.get(0);
        tkoverrideNode8 = (TKoverride)nodeArrayList2.get(0);

        pmemberNode1 = new AMethoddclMember(tidNode2, ptypeNode3, listNode6, pexprNode7, tkoverrideNode8);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAabstractmethod1Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        LinkedList listNode5 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList8.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        }

        pmemberNode1 = new AMethoddclMember(tidNode2, ptypeNode3, listNode5, null, null);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAabstractmethod2Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        LinkedList listNode5 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode6 = null;
        TKoverride tkoverrideNode7;
        tidNode2 = (TId)nodeArrayList4.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList9.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        }
        tkoverrideNode7 = (TKoverride)nodeArrayList3.get(0);

        pmemberNode1 = new AMethoddclMember(tidNode2, ptypeNode3, listNode5, null, tkoverrideNode7);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAabstractmethod3Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        LinkedList listNode6 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode7 = null;
        @SuppressWarnings("unused") Object nullNode8 = null;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList9.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pmemberNode1 = new AMethoddclMember(tidNode2, ptypeNode3, listNode6, null, null);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAabstractmethod4Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        LinkedList listNode6 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode7 = null;
        TKoverride tkoverrideNode8;
        tidNode2 = (TId)nodeArrayList4.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList10.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tkoverrideNode8 = (TKoverride)nodeArrayList3.get(0);

        pmemberNode1 = new AMethoddclMember(tidNode2, ptypeNode3, listNode6, null, tkoverrideNode8);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ASingleParamlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PArg pargNode1;
        pargNode1 = (PArg)nodeArrayList1.get(0);
	if(pargNode1 != null)
	{
	  listNode2.add(pargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ATailParamlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PArg pargNode1;
        LinkedList listNode2 = new LinkedList();
        pargNode1 = (PArg)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pargNode1 != null)
	{
	  listNode3.add(pargNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AParamParam */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList3.get(0);

        ptypeNode3 = new AType(tidNode4);
        }

        pargNode1 = new AArg(tidNode2, ptypeNode3);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ADeclField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList4.get(0);

        ptypeNode3 = new AType(tidNode4);
        }

        pmemberNode1 = new AFielddclMember(tidNode2, ptypeNode3);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ABodyMethodbody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ADijuncaoExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AIfExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AConditionalExpr(pexprNode2, pexprNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AConjuncaoDijuncao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ADijuncaoDijuncao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new AOrOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AEqualityConjuncao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AConjuncaoConjuncao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new AAndOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ARelationalEquality */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AEqualEquality */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new AEqOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ANotequalEquality */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new ANeqOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AAdditiveRelational */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ALowereqRelational */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new ALowereqOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ALowerRelational */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new ALowerOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ABiggerRelational */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new ABiggerOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AInstanceofRelational */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PType ptypeNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList3.get(0);

        ptypeNode3 = new AType(tidNode4);
        }

        pexprNode1 = new AInstanceofExpr(pexprNode2, ptypeNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ABiggereqRelational */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new ABiggereqOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AMultiplicationAdditive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce APlusAdditive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new AAddOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AMinusAdditive */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new AMinusOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ACastMultiplication */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ADivMultiplication */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new ADivOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AModMultiplication */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new AModOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AMulMultiplication */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block

        popNode3 = new AMulOp();
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AUnaryCast */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ACastCast */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PType ptypeNode2;
        PExpr pexprNode4;
        {
            // Block
        TId tidNode3;
        tidNode3 = (TId)nodeArrayList3.get(0);

        ptypeNode2 = new AType(tidNode3);
        }
        pexprNode4 = (PExpr)nodeArrayList1.get(0);

        pexprNode1 = new ACastExpr(ptypeNode2, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ACastUnary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AMinusUnary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block

        popNode3 = new AAinverseOp();
        }

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, null);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ANotUnary */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        POp popNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block

        popNode3 = new ANotOp();
        }

        pexprNode1 = new AOpExpr(pexprNode2, popNode3, null);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AAmethodcallpostfix1Postfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }

        pexprNode1 = new AMethodCallExpr(pexprNode2, tidNode3, listNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAmethodcallpostfix2Postfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexprNode1 = new AMethodCallExpr(pexprNode2, tidNode3, listNode5);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAselfcallpostfix1Postfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        {
            // Block

        pexprNode2 = new AThisExpr();
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pexprNode1 = new AMethodCallExpr(pexprNode2, tidNode3, listNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AAselfcallpostfix2Postfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        {
            // Block

        pexprNode2 = new AThisExpr();
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexprNode1 = new AMethodCallExpr(pexprNode2, tidNode3, listNode5);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AFieldPostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TId tidNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        pexprNode1 = new AFieldAccessExpr(pexprNode2, tidNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAnewpostfix1Postfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TKnew tknewNode2;
        PType ptypeNode3;
        LinkedList listNode5 = new LinkedList();
        tknewNode2 = (TKnew)nodeArrayList1.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList2.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        }

        pexprNode1 = new ANewObjExpr(tknewNode2, ptypeNode3, listNode5);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AAnewpostfix2Postfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TKnew tknewNode2;
        PType ptypeNode3;
        LinkedList listNode6 = new LinkedList();
        tknewNode2 = (TKnew)nodeArrayList1.get(0);
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList2.get(0);

        ptypeNode3 = new AType(tidNode4);
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pexprNode1 = new ANewObjExpr(tknewNode2, ptypeNode3, listNode6);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AIdentifierPostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexprNode1 = new AIdentifierExpr(tidNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AOtherExpressionPostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce ANumberPostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexprNode1 = new AIntegerExpr(tnumberNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AStringPostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pexprNode1 = new AStringExpr(tstringNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce ASuperPostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TKsuper tksuperNode2;
        tksuperNode2 = (TKsuper)nodeArrayList1.get(0);

        pexprNode1 = new ASuperExpr(tksuperNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AThisPostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block

        pexprNode1 = new AThisExpr();
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AFalsePostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexprNode1 = new AFalseExpr(tfalseNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce ATruePostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexprNode1 = new ATrueExpr(ttrueNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AErrorPostfix */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TKerror tkerrorNode2;
        tkerrorNode2 = (TKerror)nodeArrayList1.get(0);

        pexprNode1 = new AErrorExpr(tkerrorNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AHeadArguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ATailArguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        LinkedList listNode2 = new LinkedList();
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ATerminal$Members */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMember pmemberNode1;
        pmemberNode1 = (PMember)nodeArrayList1.get(0);
	if(pmemberNode1 != null)
	{
	  listNode2.add(pmemberNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ANonTerminal$Members */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMember pmemberNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmemberNode2 = (PMember)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmemberNode2 != null)
	{
	  listNode3.add(pmemberNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {21, SHIFT, 1}, {34, SHIFT, 2}, },
			{{-1, ERROR, 1}, {40, SHIFT, 4}, },
			{{-1, ERROR, 2}, {21, SHIFT, 5}, },
			{{-1, ERROR, 3}, {41, ACCEPT, -1}, },
			{{-1, ERROR, 4}, {24, SHIFT, 6}, },
			{{-1, ERROR, 5}, {40, SHIFT, 7}, },
			{{-1, ERROR, 6}, {40, SHIFT, 8}, },
			{{-1, ERROR, 7}, {24, SHIFT, 9}, },
			{{-1, ERROR, 8}, {32, SHIFT, 10}, },
			{{-1, ERROR, 9}, {40, SHIFT, 11}, },
			{{-1, REDUCE, 0}, {22, SHIFT, 12}, {25, SHIFT, 13}, {34, SHIFT, 14}, },
			{{-1, ERROR, 11}, {32, SHIFT, 19}, },
			{{-1, ERROR, 12}, {23, SHIFT, 20}, {40, SHIFT, 21}, },
			{{-1, ERROR, 13}, {40, SHIFT, 22}, },
			{{-1, ERROR, 14}, {22, SHIFT, 23}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 2}, {22, SHIFT, 12}, {25, SHIFT, 13}, {34, SHIFT, 14}, },
			{{-1, REDUCE, 1}, {22, SHIFT, 12}, {25, SHIFT, 13}, {34, SHIFT, 14}, },
			{{-1, ERROR, 20}, {40, SHIFT, 26}, },
			{{-1, ERROR, 21}, {15, SHIFT, 27}, },
			{{-1, ERROR, 22}, {15, SHIFT, 28}, },
			{{-1, ERROR, 23}, {23, SHIFT, 29}, {40, SHIFT, 30}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 3}, {22, SHIFT, 12}, {25, SHIFT, 13}, {34, SHIFT, 14}, },
			{{-1, ERROR, 26}, {15, SHIFT, 31}, },
			{{-1, ERROR, 27}, {18, SHIFT, 32}, },
			{{-1, ERROR, 28}, {40, SHIFT, 33}, },
			{{-1, ERROR, 29}, {40, SHIFT, 34}, },
			{{-1, ERROR, 30}, {15, SHIFT, 35}, },
			{{-1, ERROR, 31}, {18, SHIFT, 36}, },
			{{-1, ERROR, 32}, {19, SHIFT, 37}, {40, SHIFT, 38}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 34}, {15, SHIFT, 41}, },
			{{-1, ERROR, 35}, {18, SHIFT, 42}, },
			{{-1, ERROR, 36}, {19, SHIFT, 43}, {40, SHIFT, 38}, },
			{{-1, ERROR, 37}, {16, SHIFT, 45}, },
			{{-1, ERROR, 38}, {15, SHIFT, 46}, },
			{{-1, ERROR, 39}, {19, SHIFT, 47}, },
			{{-1, REDUCE, 14}, {17, SHIFT, 48}, },
			{{-1, ERROR, 41}, {18, SHIFT, 49}, },
			{{-1, ERROR, 42}, {19, SHIFT, 50}, {40, SHIFT, 38}, },
			{{-1, ERROR, 43}, {16, SHIFT, 52}, },
			{{-1, ERROR, 44}, {19, SHIFT, 53}, },
			{{-1, ERROR, 45}, {40, SHIFT, 54}, },
			{{-1, ERROR, 46}, {40, SHIFT, 55}, },
			{{-1, ERROR, 47}, {16, SHIFT, 56}, },
			{{-1, ERROR, 48}, {40, SHIFT, 38}, },
			{{-1, ERROR, 49}, {19, SHIFT, 58}, {40, SHIFT, 38}, },
			{{-1, ERROR, 50}, {16, SHIFT, 60}, },
			{{-1, ERROR, 51}, {19, SHIFT, 61}, },
			{{-1, ERROR, 52}, {40, SHIFT, 62}, },
			{{-1, ERROR, 53}, {16, SHIFT, 63}, },
			{{-1, ERROR, 54}, {32, SHIFT, 64}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 56}, {40, SHIFT, 65}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 58}, {16, SHIFT, 66}, },
			{{-1, ERROR, 59}, {19, SHIFT, 67}, },
			{{-1, ERROR, 60}, {40, SHIFT, 68}, },
			{{-1, ERROR, 61}, {16, SHIFT, 69}, },
			{{-1, ERROR, 62}, {32, SHIFT, 70}, },
			{{-1, ERROR, 63}, {40, SHIFT, 71}, },
			{{-1, ERROR, 64}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 65}, {32, SHIFT, 96}, },
			{{-1, ERROR, 66}, {40, SHIFT, 97}, },
			{{-1, ERROR, 67}, {16, SHIFT, 98}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 69}, {40, SHIFT, 99}, },
			{{-1, ERROR, 70}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 71}, {32, SHIFT, 101}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 73}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 74}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 75}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 76}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 77}, {40, SHIFT, 106}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 53}, {18, SHIFT, 107}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, {13, SHIFT, 108}, },
			{{-1, REDUCE, 21}, {12, SHIFT, 109}, },
			{{-1, REDUCE, 23}, {8, SHIFT, 110}, {9, SHIFT, 111}, },
			{{-1, REDUCE, 25}, {6, SHIFT, 112}, {7, SHIFT, 113}, {10, SHIFT, 114}, {11, SHIFT, 115}, {35, SHIFT, 116}, },
			{{-1, REDUCE, 28}, {1, SHIFT, 117}, {5, SHIFT, 118}, },
			{{-1, REDUCE, 34}, {2, SHIFT, 119}, {3, SHIFT, 120}, {4, SHIFT, 121}, },
			{{-1, REDUCE, 37}, {38, SHIFT, 122}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 43}, {20, SHIFT, 123}, },
			{{-1, ERROR, 96}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 98}, {40, SHIFT, 125}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 101}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 104}, {19, SHIFT, 127}, },
			{{-1, ERROR, 105}, {27, SHIFT, 128}, },
			{{-1, ERROR, 106}, {18, SHIFT, 129}, },
			{{-1, ERROR, 107}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {19, SHIFT, 130}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 108}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 109}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 110}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 111}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 112}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 113}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 114}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 115}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 116}, {40, SHIFT, 141}, },
			{{-1, ERROR, 117}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 118}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 119}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 120}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 121}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 122}, {40, SHIFT, 147}, },
			{{-1, ERROR, 123}, {40, SHIFT, 148}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 128}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 129}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {19, SHIFT, 150}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 62}, {17, SHIFT, 152}, },
			{{-1, ERROR, 132}, {19, SHIFT, 153}, },
			{{-1, REDUCE, 22}, {12, SHIFT, 109}, },
			{{-1, REDUCE, 24}, {8, SHIFT, 110}, {9, SHIFT, 111}, },
			{{-1, REDUCE, 26}, {6, SHIFT, 112}, {7, SHIFT, 113}, {10, SHIFT, 114}, {11, SHIFT, 115}, {35, SHIFT, 116}, },
			{{-1, REDUCE, 27}, {6, SHIFT, 112}, {7, SHIFT, 113}, {10, SHIFT, 114}, {11, SHIFT, 115}, {35, SHIFT, 116}, },
			{{-1, REDUCE, 29}, {1, SHIFT, 117}, {5, SHIFT, 118}, },
			{{-1, REDUCE, 30}, {1, SHIFT, 117}, {5, SHIFT, 118}, },
			{{-1, REDUCE, 31}, {1, SHIFT, 117}, {5, SHIFT, 118}, },
			{{-1, REDUCE, 33}, {1, SHIFT, 117}, {5, SHIFT, 118}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 35}, {2, SHIFT, 119}, {3, SHIFT, 120}, {4, SHIFT, 121}, },
			{{-1, REDUCE, 36}, {2, SHIFT, 119}, {3, SHIFT, 120}, {4, SHIFT, 121}, },
			{{-1, REDUCE, 38}, {38, SHIFT, 122}, },
			{{-1, REDUCE, 40}, {38, SHIFT, 122}, },
			{{-1, REDUCE, 39}, {38, SHIFT, 122}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 50}, {18, SHIFT, 154}, },
			{{-1, ERROR, 149}, {28, SHIFT, 155}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 151}, {19, SHIFT, 156}, },
			{{-1, ERROR, 152}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 154}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {19, SHIFT, 158}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, ERROR, 155}, {0, SHIFT, 72}, {5, SHIFT, 73}, {14, SHIFT, 74}, {18, SHIFT, 75}, {26, SHIFT, 76}, {29, SHIFT, 77}, {30, SHIFT, 78}, {31, SHIFT, 79}, {33, SHIFT, 80}, {36, SHIFT, 81}, {37, SHIFT, 82}, {39, SHIFT, 83}, {40, SHIFT, 84}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 159}, {19, SHIFT, 161}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 47}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 15}, {18, 24}, {25, 24}, },
			{{-1, 16}, },
			{{-1, 39}, {36, 44}, {42, 51}, {48, 57}, {49, 59}, },
			{{-1, 40}, },
			{{-1, 17}, },
			{{-1, 85}, {70, 100}, {96, 124}, {101, 126}, },
			{{-1, 86}, {75, 104}, {76, 105}, {107, 131}, {128, 149}, {129, 131}, {152, 131}, {154, 131}, {155, 160}, },
			{{-1, 87}, },
			{{-1, 88}, {108, 133}, },
			{{-1, 89}, {109, 134}, },
			{{-1, 90}, {110, 135}, {111, 136}, },
			{{-1, 91}, {112, 137}, {113, 138}, {114, 139}, {115, 140}, },
			{{-1, 92}, {117, 142}, {118, 143}, },
			{{-1, 93}, {119, 144}, {120, 145}, {121, 146}, },
			{{-1, 94}, {73, 102}, {74, 103}, },
			{{-1, 95}, },
			{{-1, 132}, {129, 151}, {152, 157}, {154, 159}, },
			{{-1, 18}, {19, 25}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class', 'abstract'",
			"expecting: id",
			"expecting: 'class'",
			"expecting: EOF",
			"expecting: 'extends'",
			"expecting: 'is'",
			"expecting: 'method', 'field', 'abstract', EOF",
			"expecting: 'override', id",
			"expecting: 'method'",
			"expecting: ':'",
			"expecting: '('",
			"expecting: ')', id",
			"expecting: '->'",
			"expecting: ')'",
			"expecting: ',', ')'",
			"expecting: string, '-', '!', '(', 'if', 'new', 'this', 'super', 'error', 'true', 'false', number, id",
			"expecting: '+', '/', '*', '%', '-', '<=', '<', '==', '!=', '>', '>=', '&&', '||', ',', ')', '.', 'method', 'field', 'then', 'else', 'abstract', 'instanceof', 'as', EOF",
			"expecting: string, '-', '!', '(', 'new', 'this', 'super', 'error', 'true', 'false', number, id",
			"expecting: '+', '/', '*', '%', '-', '<=', '<', '==', '!=', '>', '>=', '&&', '||', ',', '(', ')', '.', 'method', 'field', 'then', 'else', 'abstract', 'instanceof', 'as', EOF",
			"expecting: '||', ',', ')', 'method', 'field', 'then', 'else', 'abstract', EOF",
			"expecting: '&&', '||', ',', ')', 'method', 'field', 'then', 'else', 'abstract', EOF",
			"expecting: '==', '!=', '&&', '||', ',', ')', 'method', 'field', 'then', 'else', 'abstract', EOF",
			"expecting: '<=', '<', '==', '!=', '>', '>=', '&&', '||', ',', ')', 'method', 'field', 'then', 'else', 'abstract', 'instanceof', EOF",
			"expecting: '+', '-', '<=', '<', '==', '!=', '>', '>=', '&&', '||', ',', ')', 'method', 'field', 'then', 'else', 'abstract', 'instanceof', EOF",
			"expecting: '+', '/', '*', '%', '-', '<=', '<', '==', '!=', '>', '>=', '&&', '||', ',', ')', 'method', 'field', 'then', 'else', 'abstract', 'instanceof', EOF",
			"expecting: '+', '/', '*', '%', '-', '<=', '<', '==', '!=', '>', '>=', '&&', '||', ',', ')', 'method', 'field', 'then', 'else', 'abstract', 'instanceof', 'as', EOF",
			"expecting: 'then'",
			"expecting: string, '-', '!', '(', ')', 'if', 'new', 'this', 'super', 'error', 'true', 'false', number, id",
			"expecting: 'else'",
			"expecting: ',', ')', 'method', 'field', 'then', 'else', 'abstract', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 1, 4, 5, 1, 6, 5, 7, 1, 8, 6, 6, 6, 6, 6, 1, 9, 9, 7, 6, 6, 9, 10, 1, 1, 9, 10, 11, 6, 9, 10, 11, 12, 9, 13, 14, 10, 11, 12, 13, 1, 1, 12, 1, 11, 12, 13, 1, 12, 5, 14, 1, 13, 12, 13, 1, 12, 5, 1, 15, 5, 1, 12, 6, 1, 15, 5, 16, 17, 17, 15, 15, 1, 16, 16, 16, 16, 16, 16, 18, 6, 6, 19, 20, 21, 22, 23, 24, 25, 25, 16, 15, 6, 1, 6, 6, 15, 25, 25, 13, 26, 10, 27, 17, 17, 17, 17, 17, 17, 17, 17, 1, 17, 17, 17, 17, 17, 1, 1, 6, 6, 6, 16, 15, 27, 16, 14, 13, 20, 21, 22, 22, 23, 23, 23, 23, 22, 24, 24, 25, 25, 25, 25, 18, 28, 16, 13, 15, 16, 27, 15, 16, 13, 16, 13, 29, 16, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
